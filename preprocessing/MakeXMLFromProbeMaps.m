function MakeXMLFromProbeMaps

%% Define text components
header = {'<?xml version=''1.0''?>';...
'<parameters version=''1.0'' creator=''MakeXMLFromProbeMaps.m''>';...
 '<acquisitionSystem>';...
  '<nBits>16</nBits>';...
  '<nChannels>1</nChannels>';...
  '<samplingRate>20000</samplingRate>';...
  '<voltageRange>20</voltageRange>';...
  '<amplification>1000</amplification>';...
  '<offset>0</offset>';...
 '</acquisitionSystem>';...
 '<fieldPotentials>';...
  '<lfpSamplingRate>1250</lfpSamplingRate>';...
 '</fieldPotentials>';...
 '<anatomicalDescription>';...
  '<channelGroups>'};
anatomygroupstart = '<group>';
anatomychannelnumberline_start = ['<channel skip="0">'];
anatomychannelnumberline_end = ['</channel>'];
anatomygroupend = '</group>';

anatomyspikegroupinterface = {' </anatomicalDescription>';...
 '<spikeDetection>';...
  '<channelGroups>'};

spikegroupstart = {'<group>';...
        '<channels>'};
spikechannelnumberline_start = ['<channel>']
spikechannelnumberline_end = ['</channel>'];
spikegroupend = {'</channels>';...
    '</group>'};

footer = {'</channelGroups>';...
 '</spikeDetection>';...
 '<neuroscope version="2.0.0">';...
  '<miscellaneous>';...
   '<screenGain>0.2</screenGain>';...
   '<traceBackgroundImage></traceBackgroundImage>';...
  '</miscellaneous>';...
  '<video>';...
   '<rotate>0</rotate>';...
   '<flip>0</flip>';...
   '<videoImage></videoImage>';...
   '<positionsBackground>0</positionsBackground>';...
  '</video>';...
  '<spikes>';...
   '<nSamples>32</nSamples>';...
   '<peakSampleIndex>16</peakSampleIndex>';...
  '</spikes>';...
  '<channels>';...
   '<channelColors>';...
    '<channel>0</channel>';...
    '<color>#0080ff</color>';...
    '<anatomyColor>#0080ff</anatomyColor>';...
    '<spikeColor>#0080ff</spikeColor>';...
   '</channelColors>';...
   '<channelOffset>';...
    '<channel>0</channel>';...
    '<defaultOffset>0</defaultOffset>';...
   '</channelOffset>';...
  '</channels>';...
 '</neuroscope>';...
'</parameters>'};



lineend = '\n';

%% Gather probe maps


%% Make file
s = header;

for gidx = each group
    s = {s; anatomygroupstart};
    for chidx = 1 : numchansingroup
        thischan = xyz;
        s = {s; [anatomychannelnumberline_start, num2str(thischan) anatomychannelnumberline_end]};
    end
    s = {s, anatomygroupend};
end

s = {s, anatomyspikegroupinterface};

for gidx = each group
    s = {s; spikegroupstart};
    for chidx = 1 : numchansingroup
        thischan = xyz;
        s = {s; [spikechannelnumberline_start, num2str(thischan) spikechannelnumberline_end]};
    end
    s = {s, anatomygroupend};
end
 
s = {s,footer};


